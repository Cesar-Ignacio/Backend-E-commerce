<style>
    .btnEnabled {
        cursor: pointer;
        opacity: 1;
    }

    .btnDisabled {
        cursor: not-allowed;
        opacity: 0.5;
    }
</style>
<div>
    <div style="border-bottom:solid 2px yellow ;">
        <p>Bienvenido {{user.fullName}}</p>
        <p>{{user.role}}</p>
        <input type="hidden" id="cartId" value={{user.cart_id}}>
        <input type="hidden" id="userId" value={{user._id}}>
        <button id="btnlogout">Log Out</button>
        {{!-- <button id="btnPremium">Premium</button> --}}
    </div>
    <h1>Productos</h1>
    <div style="border: solid 1px black; display: flex; gap: 1rem; margin-bottom: 1rem;">
        <p>Limit: <span id="limit"></span></p>
        <p>CantPro: <span id="cantPro"></span></p>
        <p>Page: <span id="page"></span></p>
        <p>Total Pages: <span id="totPag"></span></p>
    </div>
    <div style="display: grid; grid-template-columns: repeat(3,1fr); gap: 1rem;" id="catalogo">
        {{!-- List Products --}}
    </div>
    <div style="display: flex; gap: 1rem; margin: 1rem 0;">
        <button id="btnPrev">Previous</button>
        <button id="btnNext">Next</button>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>

    const socketClient = io();

    const catalogo = document.querySelector("#catalogo");
    const spanLimit = document.querySelector("#limit");
    const spanCantPro = document.querySelector("#cantPro");
    const spantotPag = document.querySelector("#totPag");
    const spanPage = document.querySelector("#page");
    const btnNext = document.querySelector("#btnNext");
    const btnPrev = document.querySelector("#btnPrev");
    const btnPremium = document.querySelector("#btnPremium");
    const btnLogout = document.querySelector("#btnlogout");
    const cartId = document.querySelector('#cartId').value;
    const userId = document.querySelector('#userId').value;
    let next = true;
    let previou = true;

    socketClient.on("getProducts", data => {
        renderizarProductos(data)
    })
    const cardProduct = (pro) => {
        const cardProducto = document.createElement("div");
        cardProducto.setAttribute("style", "border: solid 1px black; padding: 0.5em;")

        const contenedorImg = document.createElement("div");
        const img = document.createElement("img");
        img.setAttribute("style", "width: 100%; height: 100%")
        img.alt = "img";
        img.src = `/static/img/${pro.thumbnail}`;
        contenedorImg.appendChild(img);

        const contenedorInfo = document.createElement("div");
        contenedorInfo.setAttribute("style", "display:flex; flex-direction: column;")
        const titulo = document.createElement("strong");
        titulo.innerText = `${pro.title}`;
        const precio = document.createElement("strong");
        precio.innerText = `$${pro.price}`;
        contenedorInfo.append(titulo, precio);

        const btnSee = document.createElement("button");
        btnSee.innerText = "See";

        btnSee.addEventListener('click', async () => {
            window.location.href = `/productDetails/${pro._id}`;
        })

        const btnAddCart = document.createElement("button");
        btnAddCart.innerText = "Add Cart "
        btnAddCart.addEventListener('click', async () => {
            const response = await fetch(`/api/carts/${cartId}/product/${pro._id}`, {
                method: 'POST'
            })
            const { message } = await response.json();
            alert(`${message}`)
        })

        const btnEliminar = document.createElement("button");
        btnEliminar.innerText = "Delete";
        btnEliminar.addEventListener("click", async () => {
            const response = await fetch(`/api/products/${pro._id}`, {
                method: "DELETE"
            })
            const { message } = await response.json();
            alert(`${message}`)
        })

        cardProducto.append(contenedorImg, contenedorInfo, btnSee, btnEliminar, btnAddCart);

        catalogo.appendChild(cardProducto);
    }

    const renderizarProductos = (data) => {
        spanLimit.innerText = data.limit;
        spanCantPro.innerText = data.totalDocs;
        spanPage.innerText = data.page;
        spantotPag.innerText = data.totalPages;
        btnNext.value = data.nextPage;
        btnPrev.value = data.prevPage;
        previou = data.hasPrevPage;
        next = data.hasNextPage;
        catalogo.innerHTML = " ";
        data.docs.forEach(pro => {
            cardProduct(pro);
        })
    }

    btnNext.addEventListener('click', async ({ target: { value } }) => {
        if (next) {
            const res = await fetch(`/api/products?page=${value}`);
            const dataResponse = await res.json();
            renderizarProductos(dataResponse.data)
        }
    });

    btnPrev.addEventListener('click', async ({ target: { value } }) => {
        if (previou) {
            const res = await fetch(`/api/products?page=${value}`);
            const dataResponse = await res.json();
            renderizarProductos(dataResponse.data)
        }
    });

    btnLogout.addEventListener('click', async () => {
        const response = await fetch('/api/sessions/logout', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const responseData = await response.json();

        if (responseData.status) {
            window.location.href = responseData.data.url;
        }

    });

    btnPremium.addEventListener("click", async () => {
        const response = await fetch(`/api/users/premium/${userId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const responseData = await response.json();

        console.log(responseData);

    });



</script>